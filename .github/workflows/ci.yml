name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'


jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup `stable`
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: cargo-fmt
      run: cargo fmt --all -- --check

  build:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
        include:
          - { toolchain: stable-x86_64-pc-windows-msvc   , os: windows-latest }
          - { toolchain: stable-x86_64-apple-darwin      , os: macos-latest  }
          - { toolchain: stable-x86_64-unknown-linux-gnu , os: ubuntu-latest }

    name: Build (${{ matrix.toolchain }})
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup `${{ matrix.toolchain }}`
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
        components: clippy, rustfmt

    - name: cargo-clippy
      run: cargo clippy --workspace --lib --tests

    - name: cargo-build
      run: cargo build --workspace --lib --tests

    - name: cargo-test
      run: cargo test --workspace --no-fail-fast
      env:
        RUST_BACKTRACE: full

  upload:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
        include:
          - { toolchain: stable-x86_64-pc-windows-msvc  , os: windows-latest, exe-suffix: .exe }
          - { toolchain: stable-x86_64-apple-darwin     , os: macos-latest  , exe-suffix: '' }
          - { toolchain: stable-x86_64-unknown-linux-gnu, os: ubuntu-latest , exe-suffix: '' }

    name: Upload (${{ matrix.toolchain }})
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup `${{ matrix.toolchain }}`
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: cargo-install
        run: cargo install --path ./codesnip -v --locked

      - name: Create an asset
        id: asset
        run: |
          BIN_TARGET=cargo-codesnip
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.toolchain }}"
          mkdir "$ASSET_STEM"
          mv "$HOME/.cargo/bin/$BIN_TARGET${{ matrix.exe-suffix }}" "./$ASSET_STEM/"
          if ${{ contains(matrix.toolchain, 'pc-windows') }}; then
            ASSET="$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
          else
            ASSET="$ASSET_STEM.tar.gz"
            tar -czvf "./$ASSET" "./$ASSET_STEM"
          fi
          echo "asset=$ASSET" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: ${{ steps.asset.outputs.asset }}


  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [fmt, build, upload]

    steps:
      - name: Download the assets
        uses: actions/download-artifact@v4
        with:
          name: assets
          path: ./assets

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
